classdef gpuAxCaliberSMT
% Kwok-Shing Chan @ MGH
% kchan2@mgh.harvard.edu
% Date created: 1 Apr 2024 
% Date modified: 

    properties (GetAccess = public, SetAccess = protected)
        b;
        Delta;
        delta;
        g;
%         beta;
%         erf_a;
        Da;
        DeL;
        Dcsf;
        D0;
        Scsf;
        Nav;
        
%         bm2;
    end
    
    properties (GetAccess = private, SetAccess = private)
        bm  = [1.8412    5.3314    8.5363   11.7060   14.8636   18.0155   21.1644   24.3113   27.4571   30.6019 ...
              33.7462   36.8900   40.0334   43.1766   46.3196   49.4624   52.6050   55.7476   58.8900   62.0323];
        bm2 = [1.8412    5.3314    8.5363   11.7060   14.8636   18.0155   21.1644   24.3113   27.4571   30.6019 ...
              33.7462   36.8900   40.0334   43.1766   46.3196   49.4624   52.6050   55.7476   58.8900   62.0323].^2;

        k0 = [0 0.01:0.01:0.1 0.2:0.1:100 101:500 Inf].';
        p0 = [0 0.00133460 0.00267173 0.00401138 0.00535354 0.00669820 0.00804534 0.00939496 0.01074705 0.01210159 0.01345857 0.02716024 0.04109301 0.05524369 0.06959793 0.08414027 0.09885419 0.11372219 0.12872588 0.14384606 0.15906284 0.17435577 0.18970393 0.20508607 0.22048078 0.23586658 0.25122206 0.26652607 0.28175777 0.29689684 0.31192354 0.32681885 0.34156459 0.35614347 0.37053921 0.38473658 0.39872149 0.41248101 0.42600338 0.43927809 0.45229585 0.46504855 0.47752933 0.48973247 0.50165342 0.51328871 0.52463594 0.53569370 0.54646154 0.55693989 0.56712998 0.57703384 0.58665414 0.59599422 0.60505795 0.61384974 0.62237440 0.63063715 0.63864352 0.64639933 0.65391062 0.66118359 0.66822462 0.67504015 0.68163668 0.68802078 0.69419898 0.70017779 0.70596369 0.71156307 0.71698223 0.72222738 0.72730459 0.73221983 0.73697891 0.74158749 0.74605109 0.75037508 0.75456465 0.75862484 0.76256053 0.76637641 0.77007705 0.77366683 0.77714997 0.78053055 0.78381248 0.78699953 0.79009532 0.79310332 0.79602687 0.79886917 0.80163330 0.80432220 0.80693868 0.80948546 0.81196513 0.81438017 0.81673295 0.81902576 0.82126076 0.82344006 0.82556564 0.82763942 0.82966324 0.83163884 0.83356791 0.83545205 0.83729280 0.83909164 0.84084998 0.84256918 0.84425053 0.84589527 0.84750460 0.84907966 0.85062155 0.85213130 0.85360995 0.85505844 0.85647771 0.85786866 0.85923213 0.86056895 0.86187991 0.86316577 0.86442726 0.86566508 0.86687991 0.86807240 0.86924318 0.87039283 0.87152196 0.87263111 0.87372083 0.87479163 0.87584401 0.87687846 0.87789544 0.87889541 0.87987879 0.88084601 0.88179747 0.88273356 0.88365467 0.88456115 0.88545336 0.88633164 0.88719633 0.88804774 0.88888618 0.88971196 0.89052536 0.89132667 0.89211616 0.89289409 0.89366073 0.89441631 0.89516109 0.89589530 0.89661916 0.89733290 0.89803673 0.89873086 0.89941549 0.90009082 0.90075704 0.90141433 0.90206288 0.90270287 0.90333446 0.90395782 0.90457311 0.90518049 0.90578012 0.90637213 0.90695669 0.90753393 0.90810399 0.90866701 0.90922311 0.90977242 0.91031507 0.91085118 0.91138087 0.91190426 0.91242146 0.91293257 0.91343771 0.91393698 0.91443048 0.91491832 0.91540059 0.91587739 0.91634881 0.91681495 0.91727588 0.91773171 0.91818251 0.91862836 0.91906936 0.91950557 0.91993708 0.92036396 0.92078629 0.92120414 0.92161759 0.92202669 0.92243152 0.92283216 0.92322865 0.92362107 0.92400948 0.92439394 0.92477451 0.92515125 0.92552423 0.92589348 0.92625908 0.92662107 0.92697951 0.92733445 0.92768594 0.92803404 0.92837878 0.92872023 0.92905842 0.92939340 0.92972523 0.93005394 0.93037958 0.93070218 0.93102180 0.93133848 0.93165225 0.93196316 0.93227124 0.93257653 0.93287908 0.93317891 0.93347607 0.93377059 0.93406250 0.93435184 0.93463865 0.93492295 0.93520478 0.93548418 0.93576117 0.93603578 0.93630805 0.93657801 0.93684568 0.93711109 0.93737428 0.93763526 0.93789407 0.93815074 0.93840529 0.93865775 0.93890814 0.93915649 0.93940283 0.93964717 0.93988954 0.94012997 0.94036849 0.94060510 0.94083984 0.94107272 0.94130378 0.94153303 0.94176048 0.94198617 0.94221012 0.94243234 0.94265285 0.94287168 0.94308884 0.94330435 0.94351823 0.94373050 0.94394117 0.94415028 0.94435782 0.94456383 0.94476831 0.94497128 0.94517277 0.94537278 0.94557134 0.94576846 0.94596415 0.94615843 0.94635131 0.94654282 0.94673296 0.94692175 0.94710921 0.94729534 0.94748017 0.94766370 0.94784595 0.94802693 0.94820666 0.94838515 0.94856241 0.94873846 0.94891330 0.94908695 0.94925943 0.94943073 0.94960089 0.94976989 0.94993777 0.95010453 0.95027018 0.95043473 0.95059819 0.95076058 0.95092190 0.95108217 0.95124139 0.95139958 0.95155674 0.95171289 0.95186803 0.95202218 0.95217534 0.95232753 0.95247875 0.95262901 0.95277832 0.95292669 0.95307414 0.95322066 0.95336626 0.95351097 0.95365477 0.95379769 0.95393973 0.95408090 0.95422120 0.95436064 0.95449924 0.95463700 0.95477393 0.95491003 0.95504531 0.95517978 0.95531345 0.95544633 0.95557841 0.95570971 0.95584024 0.95597000 0.95609900 0.95622725 0.95635474 0.95648150 0.95660752 0.95673281 0.95685738 0.95698123 0.95710437 0.95722681 0.95734856 0.95746961 0.95758997 0.95770966 0.95782866 0.95794701 0.95806468 0.95818171 0.95829807 0.95841380 0.95852888 0.95864332 0.95875714 0.95887033 0.95898290 0.95909485 0.95920619 0.95931693 0.95942707 0.95953662 0.95964557 0.95975394 0.95986172 0.95996893 0.96007557 0.96018164 0.96028715 0.96039210 0.96049650 0.96060034 0.96070365 0.96080641 0.96090863 0.96101032 0.96111149 0.96121213 0.96131225 0.96141185 0.96151095 0.96160953 0.96170761 0.96180519 0.96190227 0.96199886 0.96209497 0.96219058 0.96228572 0.96238037 0.96247456 0.96256827 0.96266151 0.96275429 0.96284661 0.96293848 0.96302989 0.96312085 0.96321136 0.96330143 0.96339106 0.96348025 0.96356901 0.96365734 0.96374524 0.96383271 0.96391977 0.96400640 0.96409262 0.96417843 0.96426383 0.96434882 0.96443341 0.96451760 0.96460139 0.96468478 0.96476778 0.96485040 0.96493262 0.96501446 0.96509593 0.96517701 0.96525771 0.96533805 0.96541801 0.96549760 0.96557683 0.96565569 0.96573419 0.96581234 0.96589013 0.96596757 0.96604465 0.96612139 0.96619778 0.96627382 0.96634953 0.96642489 0.96649992 0.96657461 0.96664897 0.96672300 0.96679671 0.96687008 0.96694313 0.96701586 0.96708828 0.96716037 0.96723215 0.96730361 0.96737477 0.96744561 0.96751615 0.96758638 0.96765631 0.96772594 0.96779527 0.96786430 0.96793304 0.96800148 0.96806963 0.96813749 0.96820506 0.96827235 0.96833935 0.96840607 0.96847251 0.96853867 0.96860455 0.96867016 0.96873549 0.96880055 0.96886534 0.96892987 0.96899412 0.96905811 0.96912184 0.96918530 0.96924851 0.96931145 0.96937414 0.96943657 0.96949875 0.96956067 0.96962235 0.96968377 0.96974495 0.96980588 0.96986656 0.96992700 0.96998720 0.97004716 0.97010688 0.97016636 0.97022561 0.97028462 0.97034339 0.97040194 0.97046025 0.97051833 0.97057619 0.97063382 0.97069122 0.97074840 0.97080536 0.97086210 0.97091861 0.97097491 0.97103099 0.97108685 0.97114250 0.97119793 0.97125315 0.97130816 0.97136296 0.97141755 0.97147193 0.97152611 0.97158008 0.97163385 0.97168741 0.97174077 0.97179393 0.97184689 0.97189965 0.97195222 0.97200458 0.97205676 0.97210874 0.97216052 0.97221211 0.97226352 0.97231473 0.97236575 0.97241659 0.97246724 0.97251770 0.97256798 0.97261807 0.97266799 0.97271772 0.97276727 0.97281664 0.97286583 0.97291484 0.97296368 0.97301234 0.97306083 0.97310914 0.97315728 0.97320524 0.97325304 0.97330066 0.97334812 0.97339541 0.97344253 0.97348948 0.97353627 0.97358289 0.97362935 0.97367564 0.97372178 0.97376775 0.97381356 0.97385921 0.97390470 0.97395004 0.97399521 0.97404023 0.97408510 0.97412981 0.97417436 0.97421877 0.97426302 0.97430712 0.97435106 0.97439486 0.97443851 0.97448201 0.97452536 0.97456856 0.97461162 0.97465453 0.97469730 0.97473992 0.97478240 0.97482474 0.97486694 0.97490899 0.97495090 0.97499268 0.97503431 0.97507581 0.97511717 0.97515839 0.97519947 0.97524042 0.97528124 0.97532192 0.97536246 0.97540287 0.97544315 0.97548330 0.97552332 0.97556321 0.97560297 0.97564259 0.97568209 0.97572147 0.97576071 0.97579983 0.97583882 0.97587768 0.97591643 0.97595504 0.97599354 0.97603191 0.97607015 0.97610828 0.97614628 0.97618417 0.97622193 0.97625957 0.97629710 0.97633451 0.97637179 0.97640897 0.97644602 0.97648296 0.97651978 0.97655649 0.97659308 0.97662956 0.97666592 0.97670218 0.97673831 0.97677434 0.97681026 0.97684606 0.97688176 0.97691734 0.97695282 0.97698818 0.97702344 0.97705859 0.97709363 0.97712857 0.97716340 0.97719812 0.97723274 0.97726725 0.97730166 0.97733597 0.97737017 0.97740426 0.97743826 0.97747215 0.97750594 0.97753963 0.97757322 0.97760671 0.97764010 0.97767339 0.97770658 0.97773967 0.97777267 0.97780556 0.97783836 0.97787106 0.97790367 0.97793618 0.97796859 0.97800091 0.97803314 0.97806527 0.97809730 0.97812925 0.97816110 0.97819285 0.97822452 0.97825609 0.97828757 0.97831896 0.97835026 0.97838147 0.97841259 0.97844362 0.97847456 0.97850541 0.97853618 0.97856685 0.97859744 0.97862794 0.97865836 0.97868869 0.97871893 0.97874908 0.97877915 0.97880914 0.97883904 0.97886886 0.97889859 0.97892824 0.97895781 0.97898729 0.97901669 0.97904601 0.97907525 0.97910440 0.97913347 0.97916247 0.97919138 0.97922021 0.97924897 0.97927764 0.97930623 0.97933475 0.97936319 0.97939154 0.97941983 0.97944803 0.97947616 0.97950420 0.97953218 0.97956007 0.97958789 0.97961564 0.97964331 0.97967090 0.97969842 0.97972587 0.97975324 0.97978054 0.97980776 0.97983491 0.97986199 0.97988899 0.97991593 0.97994279 0.97996957 0.97999629 0.98002294 0.98004951 0.98007602 0.98010245 0.98012882 0.98015511 0.98018134 0.98020749 0.98023358 0.98025960 0.98028555 0.98031143 0.98033724 0.98036299 0.98038867 0.98041428 0.98043982 0.98046530 0.98049071 0.98051606 0.98054134 0.98056655 0.98059170 0.98061679 0.98064181 0.98066676 0.98069165 0.98071648 0.98074124 0.98076594 0.98079058 0.98081515 0.98083966 0.98086411 0.98088849 0.98091282 0.98093708 0.98096128 0.98098542 0.98100949 0.98103351 0.98105746 0.98108136 0.98110520 0.98112897 0.98115269 0.98117634 0.98119994 0.98122347 0.98124695 0.98127037 0.98129373 0.98131704 0.98134028 0.98136347 0.98138660 0.98140967 0.98143269 0.98145565 0.98147855 0.98150139 0.98152418 0.98154691 0.98156959 0.98159221 0.98161478 0.98163729 0.98165974 0.98168214 0.98170449 0.98172678 0.98174902 0.98177120 0.98179333 0.98181541 0.98183743 0.98185940 0.98188131 0.98190318 0.98192499 0.98194674 0.98196845 0.98199010 0.98201170 0.98203325 0.98205475 0.98207620 0.98209759 0.98211894 0.98214023 0.98216147 0.98218267 0.98220381 0.98222490 0.98224594 0.98226693 0.98228788 0.98230877 0.98232961 0.98235041 0.98237115 0.98239185 0.98241250 0.98243310 0.98245365 0.98247416 0.98249461 0.98251502 0.98253538 0.98255569 0.98257596 0.98259618 0.98261635 0.98263648 0.98265656 0.98267659 0.98269658 0.98271652 0.98273641 0.98275626 0.98277606 0.98279582 0.98281553 0.98283520 0.98285482 0.98287440 0.98289393 0.98291342 0.98293287 0.98295226 0.98297162 0.98299093 0.98301020 0.98302942 0.98304861 0.98306774 0.98308684 0.98310589 0.98312490 0.98314386 0.98316279 0.98318167 0.98320051 0.98321930 0.98323806 0.98325677 0.98327544 0.98329407 0.98331266 0.98333120 0.98334971 0.98336817 0.98338660 0.98340498 0.98342332 0.98344162 0.98345988 0.98347810 0.98349628 0.98351442 0.98353252 0.98355059 0.98356861 0.98358659 0.98360453 0.98362243 0.98364030 0.98365812 0.98367591 0.98369366 0.98371137 0.98372904 0.98374667 0.98376427 0.98378182 0.98379934 0.98381682 0.98383427 0.98385167 0.98386904 0.98388637 0.98390366 0.98392092 0.98393814 0.98395532 0.98397247 0.98398958 0.98400665 0.98402369 0.98404069 0.98405765 0.98407458 0.98409147 0.98410833 0.98412515 0.98414193 0.98415868 0.98417540 0.98419207 0.98420872 0.98422533 0.98424190 0.98425844 0.98427494 0.98429141 0.98430785 0.98432425 0.98434062 0.98435695 0.98437325 0.98438951 0.98440574 0.98442194 0.98443810 0.98445423 0.98447033 0.98448639 0.98450242 0.98451842 0.98453439 0.98455032 0.98456621 0.98458208 0.98459791 0.98461371 0.98462948 0.98464522 0.98466092 0.98467659 0.98469223 0.98470784 0.98472342 0.98473896 0.98475447 0.98476995 0.98478540 0.98480082 0.98481621 0.98483156 0.98484689 0.98486218 0.98487745 0.98489268 0.98490788 0.98492305 0.98507310 0.98522020 0.98536442 0.98550585 0.98564458 0.98578068 0.98591421 0.98604527 0.98617391 0.98630019 0.98642420 0.98654597 0.98666558 0.98678309 0.98689854 0.98701199 0.98712349 0.98723309 0.98734085 0.98744680 0.98755099 0.98765346 0.98775427 0.98785343 0.98795101 0.98804703 0.98814153 0.98823455 0.98832612 0.98841628 0.98850506 0.98859248 0.98867859 0.98876340 0.98884695 0.98892927 0.98901039 0.98909032 0.98916910 0.98924675 0.98932329 0.98939875 0.98947315 0.98954652 0.98961887 0.98969022 0.98976060 0.98983003 0.98989852 0.98996610 0.99003277 0.99009857 0.99016350 0.99022759 0.99029085 0.99035329 0.99041494 0.99047580 0.99053589 0.99059523 0.99065384 0.99071171 0.99076887 0.99082534 0.99088112 0.99093622 0.99099066 0.99104445 0.99109760 0.99115013 0.99120204 0.99125334 0.99130405 0.99135417 0.99140372 0.99145271 0.99150114 0.99154902 0.99159637 0.99164319 0.99168949 0.99173528 0.99178057 0.99182537 0.99186968 0.99191351 0.99195687 0.99199977 0.99204221 0.99208421 0.99212576 0.99216688 0.99220758 0.99224785 0.99228771 0.99232716 0.99236621 0.99240487 0.99244313 0.99248101 0.99251851 0.99255565 0.99259241 0.99262881 0.99266486 0.99270055 0.99273590 0.99277091 0.99280559 0.99283993 0.99287395 0.99290764 0.99294102 0.99297408 0.99300684 0.99303929 0.99307144 0.99310330 0.99313487 0.99316614 0.99319714 0.99322785 0.99325829 0.99328845 0.99331835 0.99334798 0.99337735 0.99340646 0.99343532 0.99346393 0.99349228 0.99352040 0.99354827 0.99357590 0.99360329 0.99363046 0.99365739 0.99368410 0.99371058 0.99373684 0.99376288 0.99378871 0.99381433 0.99383973 0.99386493 0.99388992 0.99391471 0.99393929 0.99396368 0.99398788 0.99401188 0.99403569 0.99405931 0.99408275 0.99410600 0.99412907 0.99415196 0.99417467 0.99419720 0.99421957 0.99424176 0.99426378 0.99428563 0.99430732 0.99432884 0.99435020 0.99437140 0.99439244 0.99441333 0.99443406 0.99445464 0.99447506 0.99449534 0.99451547 0.99453545 0.99455528 0.99457497 0.99459452 0.99461393 0.99463320 0.99465234 0.99467134 0.99469020 0.99470893 0.99472753 0.99474599 0.99476433 0.99478254 0.99480063 0.99481859 0.99483643 0.99485414 0.99487173 0.99488921 0.99490656 0.99492380 0.99494092 0.99495793 0.99497482 0.99499160 0.99500826 0.99502482 0.99504127 0.99505761 0.99507384 0.99508996 0.99510598 0.99512190 0.99513771 0.99515342 0.99516903 0.99518454 0.99519995 0.99521526 0.99523048 0.99524559 0.99526062 0.99527554 0.99529038 0.99530512 0.99531977 0.99533432 0.99534879 0.99536317 0.99537746 0.99539166 0.99540578 0.99541980 0.99543375 0.99544761 0.99546138 0.99547507 0.99548868 0.99550221 0.99551565 0.99552902 0.99554231 0.99555552 0.99556865 0.99558170 0.99559468 0.99560758 0.99562040 0.99563315 0.99564583 0.99565843 0.99567096 0.99568342 0.99569580 0.99570812 0.99572036 0.99573254 0.99574465 0.99575668 0.99576865 0.99578056 0.99579239 0.99580416 0.99581587 0.99582751 0.99583908 0.99585059 0.99586204 0.99587342 0.99588474 0.99589600 0.99590720 0.99591834 0.99592941 0.99594043 0.99595139 0.99596229 0.99597313 0.99598391 0.99599463 0.99600530 0.99601591 0.99602646 0.99603696 0.99604740 0.99605779 0.99606812 0.99607840 0.99608863 0.99609880 0.99610892 0.99611899 0.99612901 0.99613897 0.99614888 0.99615875 0.99616856 0.99617832 0.99618803 0.99619769 0.99620731 0.99621687 0.99622639 0.99623586 0.99624528 0.99625466 0.99626399 0.99627327 0.99628250 0.99629170 0.99630084 0.99630994 0.99631900 0.99632801 0.99633697 0.99634590 0.99635478 0.99636361 0.99637241 0.99638116 0.99638987 0.99639854 0.99640716 0.99641575 0.99642429 0.99643280 0.99644126 0.99644968 0.99645807 0.99646641 0.99647472 0.99648298 0.99649121 0.99649940 0.99650755 0.99651566 0.99652374 0.99653177 0.99653977 0.99654774 0.99655566 0.99656356 0.99657141 0.99657923 0.99658701 0.99659476 0.99660247 0.99661015 0.99661780 0.99662540 0.99663298 0.99664052 0.99664803 0.99665550 0.99666294 0.99667035 0.99667772 0.99668507 0.99669238 0.99669965 0.99670690 0.99671411 0.99672130 0.99672845 0.99673557 0.99674266 0.99674971 0.99675674 0.99676374 0.99677071 0.99677764 0.99678455 0.99679143 0.99679828 0.99680510 0.99681189 0.99681865 0.99682538 0.99683209 0.99683876 0.99684541 0.99685203 0.99685862 0.99686519 0.99687173 0.99687824 0.99688472 0.99689118 0.99689761 0.99690401 0.99691039 0.99691674 0.99692306 0.99692936 0.99693564 0.99694188 0.99694811 0.99695430 0.99696047 0.99696662 0.99697274 0.99697884 0.99698491 0.99699096 0.99699698 1].';

        k1 = [0 0.01:0.01:0.1 0.2:0.1:100 101:500].';
        h1 = [1.00000000e+00 1.00334336e+00 1.00670686e+00 1.01009065e+00 1.01349487e+00 1.01691967e+00 1.02036520e+00 1.02383161e+00 1.02731905e+00 1.03082767e+00 1.03435761e+00 1.07086480e+00 1.10968228e+00 1.15098388e+00 1.19495766e+00 1.24180715e+00 1.29175265e+00 1.34503273e+00 1.40190578e+00 1.46265175e+00 1.52757402e+00 1.59700147e+00 1.67129069e+00 1.75082844e+00 1.83603426e+00 1.92736344e+00 2.02531010e+00 2.13041069e+00 2.24324772e+00 2.36445389e+00 2.49471653e+00 2.63478250e+00 2.78546353e+00 2.94764203e+00 3.12227745e+00 3.31041323e+00 3.51318434e+00 3.73182558e+00 3.96768066e+00 4.22221199e+00 4.49701155e+00 4.79381262e+00 5.11450271e+00 5.46113761e+00 5.83595681e+00 6.24140029e+00 6.68012693e+00 7.15503464e+00 7.66928231e+00 8.22631388e+00 8.82988466e+00 9.48409005e+00 1.01933970e+01 1.09626786e+01 1.17972515e+01 1.27029172e+01 1.36860073e+01 1.47534325e+01 1.59127372e+01 1.71721578e+01 1.85406882e+01 2.00281501e+01 2.16452710e+01 2.34037686e+01 2.53164443e+01 2.73972844e+01 2.96615724e+01 3.21260106e+01 3.48088537e+01 3.77300558e+01 4.09114309e+01 4.43768281e+01 4.81523251e+01 5.22664387e+01 5.67503562e+01 6.16381892e+01 6.69672511e+01 7.27783613e+01 7.91161797e+01 8.60295713e+01 9.35720081e+01 1.01802008e+02 1.10783618e+02 1.20586939e+02 1.31288709e+02 1.42972937e+02 1.55731597e+02 1.69665397e+02 1.84884611e+02 2.01509999e+02 2.19673819e+02 2.39520925e+02 2.61209985e+02 2.84914808e+02 3.10825805e+02 3.39151585e+02 3.70120716e+02 4.03983650e+02 4.41014837e+02 4.81515041e+02 5.25813893e+02 5.74272678e+02 6.27287404e+02 6.85292166e+02 7.48762838e+02 8.18221127e+02 8.94239026e+02 9.77443689e+02 1.06852280e+03 1.16823046e+03 1.27739365e+03 1.39691929e+03 1.52780211e+03 1.67113310e+03 1.82810898e+03 2.00004247e+03 2.18837364e+03 2.39468231e+03 2.62070174e+03 2.86833359e+03 3.13966445e+03 3.43698385e+03 3.76280419e+03 4.11988255e+03 4.51124466e+03 4.94021121e+03 5.41042683e+03 5.92589182e+03 6.49099709e+03 7.11056249e+03 7.78987898e+03 8.53475492e+03 9.35156691e+03 1.02473157e+04 1.12296877e+04 1.23071224e+04 1.34888862e+04 1.47851547e+04 1.62071015e+04 1.77669969e+04 1.94783163e+04 2.13558586e+04 2.34158774e+04 2.56762241e+04 2.81565062e+04 3.08782606e+04 3.38651442e+04 3.71431439e+04 4.07408066e+04 4.46894929e+04 4.90236557e+04 5.37811460e+04 5.90035496e+04 6.47365574e+04 7.10303723e+04 7.79401561e+04 8.55265219e+04 9.38560746e+04 1.03002006e+05 1.13044747e+05 1.24072690e+05 1.36182976e+05 1.49482367e+05 1.64088198e+05 1.80129435e+05 1.97747824e+05 2.17099169e+05 2.38354726e+05 2.61702745e+05 2.87350159e+05 3.15524446e+05 3.46475675e+05 3.80478761e+05 4.17835934e+05 4.58879470e+05 5.03974682e+05 5.53523220e+05 6.07966691e+05 6.67790655e+05 7.33529004e+05 8.05768796e+05 8.85155559e+05 9.72399137e+05 1.06828012e+06 1.17365689e+06 1.28947346e+06 1.41676795e+06 1.55668209e+06 1.71047150e+06 1.87951717e+06 2.06533795e+06 2.26960436e+06 2.49415382e+06 2.74100731e+06 3.01238780e+06 3.31074048e+06 3.63875503e+06 3.99939012e+06 4.39590040e+06 4.83186620e+06 5.31122614e+06 5.83831315e+06 6.41789399e+06 7.05521283e+06 7.75603915e+06 8.52672053e+06 9.37424067e+06 1.03062833e+07 1.13313026e+07 1.24586004e+07 1.36984118e+07 1.50619984e+07 1.65617522e+07 1.82113086e+07 2.00256721e+07 2.20213537e+07 2.42165223e+07 2.66311723e+07 2.92873063e+07 3.22091385e+07 3.54233163e+07 3.89591660e+07 4.28489627e+07 4.71282271e+07 5.18360525e+07 5.70154654e+07 6.27138213e+07 6.89832419e+07 7.58810951e+07 8.34705242e+07 9.18210309e+07 1.01009117e+08 1.11118988e+08 1.22243336e+08 1.34484192e+08 1.47953868e+08 1.62775999e+08 1.79086684e+08 1.97035745e+08 2.16788113e+08 2.38525356e+08 2.62447359e+08 2.88774173e+08 3.17748059e+08 3.49635726e+08 3.84730811e+08 4.23356594e+08 4.65869001e+08 5.12659905e+08 5.64160763e+08 6.20846617e+08 6.83240513e+08 7.51918351e+08 8.27514238e+08 9.10726383e+08 1.00232358e+09 1.10315238e+09 1.21414491e+09 1.33632761e+09 1.47083075e+09 1.61889894e+09 1.78190274e+09 1.96135143e+09 2.15890702e+09 2.37639979e+09 2.61584534e+09 2.87946335e+09 3.16969827e+09 3.48924220e+09 3.84105988e+09 4.22841647e+09 4.65490795e+09 5.12449472e+09 5.64153859e+09 6.21084349e+09 6.83770037e+09 7.52793665e+09 8.28797068e+09 9.12487172e+09 1.00464261e+10 1.10612099e+10 1.21786695e+10 1.34092095e+10 1.47642907e+10 1.62565367e+10 1.78998526e+10 1.97095553e+10 2.17025165e+10 2.38973211e+10 2.63144414e+10 2.89764289e+10 3.19081258e+10 3.51368978e+10 3.86928912e+10 4.26093150e+10 4.69227533e+10 5.16735082e+10 5.69059782e+10 6.26690752e+10 6.90166836e+10 7.60081666e+10 8.37089242e+10 9.21910070e+10 1.01533794e+11 1.11824739e+11 1.23160192e+11 1.35646306e+11 1.49400036e+11 1.64550236e+11 1.81238878e+11 1.99622379e+11 2.19873084e+11 2.42180880e+11 2.66754986e+11 2.93825928e+11 3.23647705e+11 3.56500185e+11 3.92691740e+11 4.32562157e+11 4.76485835e+11 5.24875321e+11 5.78185196e+11 6.36916364e+11 7.01620778e+11 7.72906645e+11 8.51444170e+11 9.37971878e+11 1.03330359e+12 1.13833609e+12 1.25405762e+12 1.38155720e+12 1.52203492e+12 1.67681325e+12 1.84734959e+12 2.03524999e+12 2.24228437e+12 2.47040324e+12 2.72175612e+12 2.99871191e+12 3.30388127e+12 3.64014132e+12 4.01066287e+12 4.41894040e+12 4.86882518e+12 5.36456168e+12 5.91082778e+12 6.51277905e+12 7.17609760e+12 7.90704584e+12 8.71252590e+12 9.60014492e+12 1.05782872e+13 1.16561937e+13 1.28440495e+13 1.41530804e+13 1.55956596e+13 1.71854245e+13 1.89374068e+13 2.08681742e+13 2.29959882e+13 2.53409774e+13 2.79253281e+13 3.07734952e+13 3.39124339e+13 3.73718565e+13 4.11845134e+13 4.53865050e+13 5.00176240e+13 5.51217337e+13 6.07471846e+13 6.69472738e+13 7.37807515e+13 8.13123793e+13 8.96135457e+13 9.87629450e+13 1.08847325e+14 1.19962314e+14 1.32213325e+14 1.45716566e+14 1.60600137e+14 1.77005257e+14 1.95087602e+14 2.15018786e+14 2.36988001e+14 2.61203809e+14 2.87896135e+14 3.17318451e+14 3.49750194e+14 3.85499422e+14 4.24905752e+14 4.68343596e+14 5.16225722e+14 5.69007194e+14 6.27189706e+14 6.91326359e+14 7.62026941e+14 8.39963730e+14 9.25877915e+14 1.02058665e+15 1.12499086e+15 1.24008382e+15 1.36696064e+15 1.50682870e+15 1.66101919e+15 1.83099979e+15 2.01838866e+15 2.22496995e+15 2.45271074e+15 2.70377990e+15 2.98056873e+15 3.28571383e+15 3.62212226e+15 3.99299933e+15 4.40187916e+15 4.85265850e+15 5.34963391e+15 5.89754281e+15 6.50160880e+15 7.16759152e+15 7.90184170e+15 8.71136191e+15 9.60387344e+15 1.05878902e+16 1.16727999e+16 1.28689542e+16 1.41877673e+16 1.56418255e+16 1.72450072e+16 1.90126158e+16 2.09615265e+16 2.31103469e+16 2.54795960e+16 2.80919000e+16 3.09722090e+16 3.41480356e+16 3.76497188e+16 4.15107140e+16 4.57679134e+16 5.04619994e+16 5.56378342e+16 6.13448892e+16 6.76377192e+16 7.45764847e+16 8.22275286e+16 9.06640115e+16 9.99666129e+16 1.10224304e+17 1.21535202e+17 1.34007506e+17 1.47760542e+17 1.62925899e+17 1.79648693e+17 1.98088963e+17 2.18423199e+17 2.40846036e+17 2.65572127e+17 2.92838192e+17 3.22905297e+17 3.56061353e+17 3.92623882e+17 4.32943062e+17 4.77405088e+17 5.26435878e+17 5.80505158e+17 6.40130978e+17 7.05884677e+17 7.78396371e+17 8.58361005e+17 9.46545024e+17 1.04379373e+18 1.15103941e+18 1.26931027e+18 1.39974033e+18 1.54358032e+18 1.70220968e+18 1.87714981e+18 2.07007870e+18 2.28284707e+18 2.51749612e+18 2.77627717e+18 3.06167328e+18 3.37642315e+18 3.72354743e+18 4.10637773e+18 4.52858871e+18 4.99423336e+18 5.50778203e+18 6.07416534e+18 6.69882171e+18 7.38774955e+18 8.14756505e+18 8.98556580e+18 9.90980098e+18 1.09291488e+19 1.20534020e+19 1.32933621e+19 1.46609429e+19 1.61692861e+19 1.78328868e+19 1.96677335e+19 2.16914621e+19 2.39235255e+19 2.63853809e+19 2.91006963e+19 3.20955788e+19 3.53988257e+19 3.90422018e+19 4.30607456e+19 4.74931066e+19 5.23819176e+19 5.77742056e+19 6.37218448e+19 7.02820561e+19 7.75179590e+19 8.54991795e+19 9.43025213e+19 1.04012706e+20 1.14723189e+20 1.26537061e+20 1.39568043e+20 1.53941580e+20 1.69796053e+20 1.87284110e+20 2.06574142e+20 2.27851904e+20 2.51322308e+20 2.77211396e+20 3.05768527e+20 3.37268774e+20 3.72015584e+20 4.10343701e+20 4.52622399e+20 4.99259043e+20 5.50703021e+20 6.07450077e+20 6.70047101e+20 7.39097402e+20 8.15266532e+20 8.99288712e+20 9.91973920e+20 1.09421570e+21 1.20699982e+21 1.33141373e+21 1.46865713e+21 1.62005350e+21 1.78706292e+21 1.97129615e+21 2.17453018e+21 2.39872541e+21 2.64604458e+21 2.91887366e+21 3.21984489e+21 3.55186224e+21 3.91812941e+21 4.32218087e+21 4.76791591e+21 5.25963642e+21 5.80208839e+21 6.40050781e+21 7.06067127e+21 7.78895180e+21 8.59238045e+21 9.47871432e+21 1.04565114e+22 1.15352137e+22 1.27252378e+22 1.40380764e+22 1.54864089e+22 1.70842244e+22 1.88469564e+22 2.07916328e+22 2.29370402e+22 2.53039053e+22 2.79150962e+22 3.07958429e+22 3.39739817e+22 3.74802244e+22 4.13484556e+22 4.56160605e+22 5.03242863e+22 5.55186421e+22 6.12493385e+22 6.75717743e+22 7.45470720e+22 8.22426699e+22 9.07329746e+22 1.00100081e+23 1.10434569e+23 1.21836377e+23 1.34415771e+23 1.48294416e+23 1.63606546e+23 1.80500272e+23 1.99139011e+23 2.19703072e+23 2.42391398e+23 2.67423499e+23 2.95041572e+23 3.25512850e+23 3.59132193e+23 3.96224939e+23 4.37150061e+23 4.82303641e+23 5.32122711e+23 5.87089485e+23 6.47736035e+23 7.14649443e+23 7.88477493e+23 8.69934948e+23 9.59810480e+23 1.05897431e+24 1.16838665e+24 1.28910700e+24 1.42230443e+24 1.56926891e+24 1.73142381e+24 1.91033971e+24 2.10774963e+24 2.32556582e+24 2.56589831e+24 2.83107538e+24 3.12366613e+24 3.44650541e+24 3.80272129e+24 4.19576543e+24 4.62944653e+24 5.10796730e+24 5.63596523e+24 6.21855756e+24 6.86139094e+24 7.57069623e+24 8.35334891e+24 9.21693585e+24 1.01698289e+25 1.12212661e+25 1.23814414e+25 1.36616036e+25 1.50741654e+25 1.66328241e+25 1.83526941e+25 2.02504544e+25 2.23445096e+25 2.46551692e+25 2.72048446e+25 3.00182667e+25 3.31227257e+25 3.65483365e+25 4.03283312e+25 4.44993812e+25 4.91019539e+25 5.41807053e+25 5.97849140e+25 6.59689595e+25 7.27928507e+25 8.03228085e+25 8.86319092e+25 9.78007941e+25 1.07918453e+26 1.19083090e+26 1.31403074e+26 1.44997996e+26 1.59999829e+26 1.76554208e+26 1.94821850e+26 2.14980112e+26 2.37224716e+26 2.61771651e+26 2.88859270e+26 3.18750612e+26 3.51735952e+26 3.88135627e+26 4.28303147e+26 4.72628634e+26 5.21542611e+26 5.75520192e+26 6.35085696e+26 7.00817749e+26 7.73354906e+26 8.53401862e+26 9.41736305e+26 1.03921647e+27 1.14678951e+27 1.26550067e+27 1.39650347e+27 1.54107094e+27 1.70060797e+27 1.87666501e+27 2.07095310e+27 2.28536057e+27 2.52197138e+27 2.78308539e+27 3.07124074e+27 3.38923854e+27 3.74017014e+27 4.12744717e+27 4.55483478e+27 5.02648822e+27 5.54699335e+27 6.12141119e+27 6.75532721e+27 7.45490567e+27 8.22694964e+27 9.07896718e+27 1.00192444e+28 1.10569262e+28 1.22021052e+28 1.34659200e+28 1.48606635e+28 1.63999029e+28 1.80986114e+28 1.99733141e+28 2.20422492e+28 2.43255449e+28 2.68454161e+28 2.96263801e+28 3.26954959e+28 3.60826272e+28 3.98207335e+28 4.39461910e+28 4.84991469e+28 5.35239103e+28 5.90693839e+28 6.51895401e+28 7.19439469e+28 7.93983482e+28 8.76253039e+28 9.67048969e+28 1.06725513e+29 1.17784704e+29 1.29990133e+29 1.43460629e+29 1.58327343e+29 1.74735022e+29 1.92843427e+29 2.12828880e+29 2.34885993e+29 2.59229554e+29 2.86096629e+29 3.15748867e+29 3.48475050e+29 3.84593912e+29 4.24457239e+29 4.68453304e+29 5.17010649e+29 5.70602261e+29 6.29750184e+29 6.95030609e+29 7.67079489e+29 8.46598741e+29 9.34363088e+29 1.03122761e+30 1.13813609e+30 1.25613019e+30 1.38635966e+30 1.53009349e+30 1.68873233e+30 1.86382210e+30 2.05706912e+30 2.27035673e+30 2.50576364e+30 2.76558421e+30 3.05235085e+30 3.36885870e+30 3.71819289e+30 4.10375865e+30 4.52931451e+30 4.99900897e+30 5.51742099e+30 6.08960461e+30 6.72113831e+30 7.41817940e+30 8.18752410e+30 9.03667388e+30 9.97390859e+30 1.10083673e+31 1.21501375e+31 1.34103534e+31 1.48013048e+31 1.63365569e+31 1.80310825e+31 1.99014084e+31 2.19657768e+31 2.42443228e+31 2.67592715e+31 2.95351547e+31 3.25990502e+31 3.59808463e+31 3.97135335e+31 4.38335267e+31 4.83810203e+31 5.34003810e+31 5.89405806e+31 6.50556744e+31 7.18053288e+31 7.92554038e+31 8.74785961e+31 9.65551492e+31 1.06573636e+32 1.17631826e+32 1.29837636e+32 1.43310187e+32 1.58180969e+32 1.74595121e+32 1.92712850e+32 2.12710996e+32 2.34784762e+32 2.59149613e+32 2.86043390e+32 3.15728626e+32 3.48495112e+32 3.84662731e+32 4.24584579e+32 4.68650414e+32 5.17290469e+32 5.70979648e+32 6.30242172e+32 6.95656693e+32 7.67861958e+32 8.47563039e+32 9.35538230e+32 1.03264665e+33 1.13983663e+33 1.25815499e+33 1.38875728e+33 1.53291902e+33 1.69204824e+33 1.86769919e+33 2.06158753e+33 2.27560711e+33 2.51184851e+33 2.77261941e+33 3.06046718e+33 3.37820379e+33 3.72893328e+33 4.11608209e+33 4.54343260e+33 5.01516004e+33 5.53587335e+33 6.11066023e+33 6.74513688e+33 7.44550289e+33 8.21860187e+33 9.07198835e+33 1.00140017e+34 1.10538474e+34 1.22016877e+34 1.34687401e+34 1.48673877e+34 1.64113001e+34 1.81155671e+34 1.99968460e+34 2.20735250e+34 2.43659026e+34 2.68963863e+34 2.96897117e+34 3.27731845e+34 3.61769475e+34 3.99342755e+34 4.40819005e+34 4.86603716e+34 5.37144509e+34 5.92935520e+34 6.54522228e+34 7.22506795e+34 7.97553959e+34 8.80397531e+34 9.71847578e+34 1.07279835e+35 1.18423702e+35 1.30725335e+35 1.44305037e+35 1.59295611e+35 1.75843662e+35 1.94111033e+35 2.14276385e+35 2.36536948e+35 2.61110449e+35 2.88237246e+35 3.18182677e+35 3.51239657e+35 3.87731548e+35 4.28015319e+35 4.72485042e+35 5.21575751e+35 5.75767697e+35 6.35591050e+35 7.01631088e+35 7.74533926e+35 8.55012841e+35 9.43855254e+35 1.04193044e+36 1.15019803e+36 1.26971742e+36 1.40165813e+36 1.54731126e+36 1.70810212e+36 1.88560421e+36 2.08155458e+36 2.29787089e+36 2.53667017e+36 2.80028951e+36 3.09130901e+36 3.41257698e+36 3.76723789e+36 4.15876313e+36 4.59098498e+36 5.06813420e+36 5.59488142e+36 6.17638290e+36 6.81833100e+36 7.52700998e+36 8.30935750e+36 9.17303259e+36 1.01264907e+37 1.11790664e+37 1.23410651e+37 1.36238634e+37 1.50400215e+37 1.66034051e+37 1.83293220e+37 2.02346721e+37 2.23381123e+37 2.46602398e+37 2.72237940e+37 3.00538787e+37 3.31782086e+37 3.66273805e+37 4.04351734e+37 4.46388792e+37 4.92796679e+37 5.44029917e+37 6.00590295e+37 6.63031795e+37 7.31966011e+37 8.08068150e+37 8.92083644e+37 9.84835459e+37 1.08723215e+38 1.20027679e+38 1.32507676e+38 1.46285465e+38 1.61496019e+38 1.78288352e+38 1.96826978e+38 2.17293524e+38 2.39888508e+38 2.64833307e+38 2.92372328e+38 3.22775398e+38 3.56340417e+38 3.93396272e+38 4.34306062e+38 4.79470661e+38 5.29332643e+38 5.84380627e+38 6.45154060e+38 7.12248510e+38 7.86321506e+38 8.68098983e+38 9.58382396e+38 1.05805659e+39 1.16809845e+39 1.28958652e+39 1.42371154e+39 1.57178814e+39 1.73526774e+39 1.91575275e+39 2.11501232e+39 2.33499967e+39 2.57787125e+39 2.84600789e+39 3.14203813e+39 3.46886403e+39 3.82968960e+39 4.22805227e+39 4.66785751e+39 5.15341721e+39 5.68949194e+39 6.28133763e+39 6.93475714e+39 7.65615719e+39 8.45261119e+39 9.33192862e+39 1.03027316e+40 1.13745396e+40 1.25578628e+40 1.38643048e+40 1.53066771e+40 1.68991244e+40 1.86572635e+40 2.05983362e+40 2.27413790e+40 2.51074095e+40 2.77196325e+40 3.06036683e+40 3.37878031e+40 3.73032675e+40 4.11845425e+40 4.54696976e+40 5.02007650e+40 5.54241514e+40 6.11910938e+40 6.75581620e+40 7.45878142e+40 8.23490094e+40 9.09178845e+40 1.00378501e+41 1.10823671e+41 1.22355867e+41 1.35088228e+41 3.63553691e+41 9.78504044e+41 2.63389745e+42 7.09049328e+42 1.90895017e+43 5.13987455e+43 1.38404266e+44 3.72721751e+44 1.00382404e+45 2.70375507e+45 7.28305072e+45 1.96198147e+46 5.28580831e+46 1.42417134e+47 3.83748595e+47 1.03410465e+48 2.78685738e+48 7.51098694e+48 2.02446715e+49 5.45701812e+49 1.47106031e+50 3.96584264e+50 1.06922697e+51 2.88292456e+51 7.77365266e+51 2.09625934e+52 5.65317554e+52 1.52463918e+53 4.11214484e+53 1.10916470e+54 2.99191722e+54 8.07102359e+54 2.17737273e+55 5.87437525e+55 1.58494780e+56 4.27653720e+56 1.15396651e+57 3.11399181e+57 8.40358706e+57 2.26795580e+58 6.12106215e+58 1.65211775e+59 4.45940483e+59 1.20374416e+60 3.24947036e+60 8.77226556e+60 2.36827145e+61 6.39398224e+61 1.72635989e+62 4.66134176e+62 1.25866452e+63 3.39882035e+63 9.17836563e+63 2.47868407e+64 6.69414990e+64 1.80795612e+65 4.88313019e+65 1.31894430e+66 3.56264144e+66 9.62354467e+66 2.59965126e+67 7.02282711e+67 1.89725417e+68 5.12572738e+68 1.38484683e+69 3.74165747e+69 1.01097909e+70 2.73171877e+70 7.38151118e+70 1.99466457e+71 5.39025841e+71 1.45668027e+72 3.93671213e+72 1.06394132e+73 2.87551820e+73 7.77192911e+73 2.10065940e+74 5.67801319e+74 1.53479699e+75 4.14876762e+75 1.12150383e+76 3.03176648e+76 8.19603712e+76 2.21577229e+77 5.99044708e+77 1.61959380e+78 4.37890573e+78 1.18396148e+79 3.20126707e+79 8.65602423e+79 2.34059954e+80 6.32918421e+80 1.71151299e+81 4.62833073e+81 1.25164212e+82 3.38491242e+82 9.15431952e+82 2.47580221e+83 6.69602335e+83 1.81104398e+84 4.89837406e+84 1.32490793e+85 3.58368767e+85 9.69360224e+85 2.62210891e+86 7.09294583e+86 1.91872549e+87 5.19050044e+87 1.40415712e+88 3.79867529e+88 1.02768149e+89 2.78031945e+89 7.52212542e+89 2.03514830e+90 5.50631537e+90 1.48982597e+91 4.03106084e+91 1.09071788e+92 2.95130906e+92 7.98594008e+92 2.16095846e+93 5.84757395e+93 1.58239128e+94 4.28213949e+94 1.15882121e+95 3.13603338e+95 8.48698551e+95 2.29686098e+96 6.21619102e+96 1.68237308e+97 4.55332361e+97 1.23237505e+98 3.33553408e+98 9.02809046e+98 2.44362403e+99 6.61425252e+99 1.79033782e+100 4.84615127e+100 1.31179704e+101 3.55094513e+101 9.61233390e+101 2.60208359e+102 7.04402822e+102 1.90690174e+103 5.16229561e+103 1.39754142e+104 3.78349979e+104 1.02430640e+105 2.77314865e+105 7.50798587e+105 2.03273479e+106 5.50357533e+106 1.49010193e+107 4.03453837e+107 1.09239193e+108 2.95780691e+108 8.00880668e+108 2.16856479e+109 5.87196617e+109 1.59001487e+110 4.30551670e+110 1.16588515e+111 3.15713107e+111 8.54940240e+111 2.31518212e+112 6.26961350e+112 1.69786259e+113 4.59801544e+113 1.24521511e+114 3.37228570e+114 9.13293403e+114 2.47344476e+115 6.69884615e+115 1.81427719e+116 4.91375029e+116 1.33084749e+117 3.60453475e+117 9.76283224e+117 2.64428387e+118 7.16219143e+118 1.93994463e+119 5.25458307e+119 1.42328762e+120 3.85524979e+120 1.04428197e+121 2.82870983e+121 7.66239169e+121 2.07560921e+122 5.62253392e+122 1.52308379e+123 4.12591895e+123 1.11769352e+124 3.02781884e+124 8.20242214e+124 2.22207845e+125 6.01979451e+125 1.63083085e+126 4.41815666e+126 1.19695607e+127 3.24280016e+127 8.78551049e+127 2.38022837e+128 6.44874243e+128 1.74717409e+129 4.73371433e+129 1.28254495e+130 3.47494389e+130 9.41515821e+130 2.55100929e+131 6.91195692e+131 1.87281353e+132 5.07449185e+132 1.37497581e+133 3.72564955e+133 1.00951637e+134 2.73545212e+134 7.41223594e+134 2.00850856e+135 5.44255027e+135 1.47480802e+136 3.99643532e+136 1.08296473e+137 2.93467519e+137 7.95261474e+137 2.15508298e+138 5.84012542e+138 1.58264843e+139 4.28894820e+139 1.16230793e+140 3.14989173e+140 8.53638611e+140 2.31343047e+141 6.26964289e+141 1.69915534e+142 4.60497495e+142 1.24803091e+143 3.38241792e+143 9.16712236e+143 2.48452061e+144 6.73373418e+144 1.82504300e+145 4.94645406e+145 1.34065979e+146 3.63368176e+146 9.84869924e+146 2.66940532e+147 7.23525438e+147 1.96108630e+148 5.31548876e+148 1.44076543e+149 3.90523262e+149 1.05853220e+150 2.86922597e+150 7.77730136e+150 2.10812607e+151 5.71436115e+151 1.54896722e+152 4.19875166e+152 1.13815536e+153 3.08522104e+153 8.36323659e+153 2.26707466e+154 6.14554759e+154 1.66593731e+155 4.51606319e+155 1.22423456e+156 3.31873449e+156 8.99670785e+156 2.43892217e+157 6.61173540e+157 1.79240509e+158 4.85914698e+158 1.31730715e+159 3.57122485e+159 9.68167395e+159 2.62474313e+160 7.11584110e+160 1.92916218e+161 5.23015170e+161 1.41795635e+162 3.84427508e+162 1.04224315e+163 2.82570374e+163 7.66103014e+163 2.07706778e+164 5.63140945e+164 1.52681516e+165 4.13960335e+165 1.12236441e+166 3.04306987e+166 8.25073848e+166 2.23705452e+167 6.06545169e+167 1.64457069e+168 4.45907473e+168 1.20903743e+169 3.27821563e+169 8.88869594e+169 2.41013479e+170 6.53502645e+170 1.77196887e+171 4.80471391e+171 1.30281177e+172 3.53263278e+172 9.57895169e+172 2.59740771e+173 7.04311711e+173 1.90981949e+174 5.17871904e+174 1.40428410e+175 3.80794091e+175 1.03259020e+176 2.80006659e+176 7.59296284e+176 2.05900181e+177 5.58347675e+177 1.51410227e+178 4.10589853e+178 1.11343202e+179 3.01940714e+179 8.18808080e+179 2.22047055e+180 6.02157858e+180 1.63296973e+181 4.42841517e+181 1.20093896e+182 3.25683638e+182 8.83229027e+182 2.39526243e+183 6.49583877e+183 1.76165040e+184 4.77756449e+184 1.29567394e+185 3.51388229e+185 9.52973901e+185 2.58450338e+186 7.00931363e+186 1.90097393e+187 5.15559860e+187 1.39824827e+188 3.79220438e+188 1.02849318e+189 2.78941625e+189 7.56532264e+189 2.05184141e+190 5.56496355e+190 1.50932597e+191 4.09360511e+191 1.11027616e+192 3.01132926e+192 8.16747140e+192 2.21523161e+193 6.00831631e+193 1.62962830e+194 4.42004243e+194 1.19885435e+195 3.25168523e+195 8.81967658e+195 2.39220776e+196 6.48854315e+196 1.75993876e+197 4.77364328e+197 1.29480512e+198 3.51205157e+198 9.52619313e+198 2.58392493e+199 7.00877966e+199 1.90110856e+200 5.15671839e+200 1.39875577e+201 3.79413114e+201 1.02916438e+202 2.79163805e+202 7.57243259e+202 2.05406253e+203 5.57177838e+203 1.51138785e+204 4.09977417e+204 1.11210514e+205 3.01671064e+205 8.18320352e+205 2.21980554e+206 6.02155119e+206 1.63344193e+207 4.43099107e+207 1.20198736e+208 3.26062435e+208 8.84511473e+208 2.39942954e+209 6.50900119e+209 1.76572275e+210 4.78996656e+210 1.29940414e+211 3.52498930e+211 9.56253730e+211 2.59412117e+212 7.03734985e+212 1.90910488e+213 5.17907486e+213 1.40500004e+214].';

    end
    
    methods

        % constructuor
        function this = gpuAxCaliberSMT(b, delta, Delta, D0, Da, DeL, Dcsf, varargin)
        % NEXI Exchange rate estimation using NEXI model
        % obj = gpuNEXI(b, Delta, Nav)
        %
        % Input
        % ----------
        % b         : b-value [ms/um2]
        % delta     : gradient duration [ms]
        % Delta     : gradient seperation [ms]
        % D0        : intra-cellular intrinsic diffusivity [um2/ms]
        % Da        : intra-cellular axial diffusivity [um2/ms]
        % DeL       : extra-cellular axial diffusivity [um2/ms]
        % Dcsf      : CSF diffusivity [um2/ms]
        %
        % Output
        % ----------
        % obj       : object of a fitting class
        %
        % Usage
        % ----------
        % obj                   = NEXI(b, Delta, Nav);
        % [out, fa, Da, De, r]  = obj.fit(S, mask, fitting,);
        % Sfit                  = smt.FWD([fa, Da, De, r]);
        % [x_train, S_train]    = obj.traindata(1e4);
        % pars0                 = smt.likelihood(S, x_train, S_train);
        % [out, fa, Da, De, r]  = smt.fit(S, mask, fitting, pars0);
        %
        % Author:
        %  Kwok-Shing Chan (kchan2@mgh.harvard.edu) 
        %  Hong-Hsi Lee (hlee84@mgh.harvard.edu)
        %  Copyright (c) 2023 Massachusetts General Hospital
        %
            
            this.b      = b(:) ;
            this.delta  = delta(:) ;
            this.Delta  = Delta(:) ;
            this.g      = sqrt(b(:)./delta(:).^2./(Delta(:)-delta(:)/3)) ;
            this.D0     = D0 ;
            this.Da     = Da ;
%             this.beta = sqrt(pi/4./b/Da);
%             this.erf_a = erf(sqrt(b*Da));
            this.DeL    = DeL;
            this.Dcsf   = Dcsf;
            this.Scsf   = exp(-b(:)*Dcsf) ;

            if nargin > 7
                this.Nav = varargin{1} ;
            else
                this.Nav =  ones(size(b)) ;
            end
            this.Nav = this.Nav(:) ;
        end
    
        % automatically segment data and fitting in case the data cannot fit in the GPU in one go
        % function  [out, fa, Da, De, ra, p2] = estimate(this, dwi, mask, bval, bvec, ldelta, BDELTA, fitting, pars0)
        function  [out, r, f, fcsf, DeR] = estimate(this, dwi, mask, extradata, fitting, pars0)
        % Perform NEXI model parameter estimation based on askAdam
        % Input data are expected in multi-dimensional image
        % 
        % Input
        % -----------
        % dwi       : 4D DWI, [x,y,z,dwi]
        % mask      : 3D signal mask, [x,y,z]
        % extradata : Optional additional data
        %   .bval       : 1D bval in ms/um2, [1,dwi]                (Optional, only needed if dwi is full acquisition)
        %   .bvec       : 2D b-table, [3,dwi]                       (Optional, only needed if dwi is full acquisition)
        %   .ldelta     : 1D gradient pulse duration in ms, [1,dwi] (Optional, only needed if dwi is full acquisition)
        %   .BDELTA     : 1D diffusion time in ms, [1,dwi]          (Optional, only needed if dwi is full acquisition)
        %   .sigma      : 3D noise map, [x,y,z]                     (Optional, only needed for NEXIrice model)
        % fitting   : fitting algorithm parameters (see fit function)
        % 
        % Output
        % -----------
        % out       : output structure contains all MCMC results
        % r         : Axon radius
        % f         : Neurite volume fraction
        % fcsf      : CSF volume fraction
        % DeR       : radial diffusivity of extracellular water
        % noise     : noise level
        % 
            
            disp('================================');
            disp('AxCaliberSMT with askAdam solver');
            disp('================================');

            disp('----------------')
            disp('Data Information');
            disp('----------------')
            fprintf('b-shells (ms/um2)              : [%s] \n',num2str(this.b.',' %.2f'));
            fprintf('Gradient pulse duration (ms)   : [%s] \n',num2str(this.delta.',' %i'));
            fprintf('Diffusion time (ms)            : [%s] \n\n',num2str(this.Delta.',' %i'));
            disp('----------------')
            disp('Fixed parameters');
            disp('----------------')
            disp(['Diffusivity intra-cellular intrinsic (um2/ms): ' num2str(this.D0,'%.2f')]);
            disp(['Diffusivity intra-cellular axial (um2/ms)    : ' num2str(this.Da,'%.2f')]);
            disp(['Diffusivity extra-cellular axial (um2/ms)    : ' num2str(this.DeL,'%.2f')]);
            disp(['Diffusivity CSF (um2/ms)                     : ' num2str(this.Dcsf,'%.2f')]);

            % get all fitting algorithm parameters 
            fitting = this.check_set_default(fitting);

            dims = size(dwi);

            % % get all fitting algorithm parameters 
            % fitting = this.check_set_default(fitting,this.DeL);
            % 
            % dims = size(dwi);

            if dims(4) > numel(this.b) % full DWI data then compute SMT

                % scale b-values if needed
                if max(extradata.bval) > 1e3
                    extradata.bval = extradata.bval/1e3;    
                end

                % compute spherical mean signal
                fprintf('\nComputing spherical mean signal...')
                obj     = preparationDWI;
                lmax    = 0;
                [dwi]   = obj.get_Sl_all(dwi,extradata.bval,extradata.bvec,extradata.ldelta,extradata.BDELTA,lmax);
                % [dwi,bval_unique] = obj.Slm(dwi,bval,bvec,(fitting.lmax+2));
                disp('done.')
                fprintf('\n');
            elseif dims(4) < numel(this.b)
                error('There are more b-shells in the class object than in the input data.');
            end

            % mask sure no nan or inf
            Nvoxel_old              = numel(mask(mask>0));
            mask_nonnaninf          = and(~isnan(dwi) , ~isinf(dwi));
            dwi(mask_nonnaninf==0)  = 0;
            dwi(mask_nonnaninf==0)  = 0;
            mask_nonnaninf          = min(mask_nonnaninf,[],4);
            mask                    = and(mask,mask_nonnaninf);
            Nvoxel_new              = numel(mask(mask>0));
            if Nvoxel_old ~= Nvoxel_new
                disp('The mask is updated due to the presence of NaN/Inf. Please make use of the output mask in your subseqeunt analysis.');
            end

            % update matrix size
            dims = size(dwi);

            % if no pars input at all (not even empty) then use prior
            if nargin < 6
                pars0 = [];
            end
            if and(fitting.isPrior,isempty(pars0))
                pars0 = this.estimate_prior(dwi, mask);
            end

            % convert datatype to single
            dwi     = single(dwi);
            mask    = mask >0;
            if ~isempty(pars0); pars0 = single(pars0); end

            % determine if we need to divide the data to fit in GPU
            gpuDevice([]);
            [NSegment,maxSlice] = this.findOptimalDivide(mask);

            fprintf('Data is divided into %d segments\n',NSegment);
            
            r       = zeros(dims(1:3),'single');
            f       = zeros(dims(1:3),'single');
            fcsf    = zeros(dims(1:3),'single');
            DeR     = zeros(dims(1:3),'single');
            for ks = 1:NSegment

                fprintf('Running #Segment = %d/%d \n',ks,NSegment);
                disp   ('------------------------')
    
                if ks ~= NSegment
                    slice = 1+(ks-1)*maxSlice : ks*maxSlice;
                else
                    slice = 1+(ks-1)*maxSlice : dims(3);
                end
                
                dwi_tmp     = dwi(:,:,slice,:);
                mask_tmp    = mask(:,:,slice);
                if ~isempty(pars0)
                    pars0_tmp   = pars0(:,:,slice,:);
                end

                [out_tmp, r(:,:,slice), f(:,:,slice), fcsf(:,:,slice), DeR(:,:,slice)]  = this.fit(dwi_tmp,mask_tmp,fitting,pars0_tmp);

                % reformat out structure
                fn1 = fieldnames(out_tmp);
                for kfn1 = 1:numel(fn1)
                    fn2 = fieldnames(out_tmp.(fn1{kfn1}));
                    for kfn2 = 1:numel(fn2)
                        if isscalar(out_tmp.(fn1{kfn1}).(fn2{kfn2})) % scalar value
                            out.(fn1{kfn1}).(fn2{kfn2})(ks) = out_tmp.(fn1{kfn1}).(fn2{kfn2});
                        else
                            % image result
                            out.(fn1{kfn1}).(fn2{kfn2})(:,:,slice) = out_tmp.(fn1{kfn1}).(fn2{kfn2});
                        end
                            
                    end
                end
            end
            out.mask = mask;

            % save the estimation results if the output filename is provided
            if ~isempty(fitting.output_filename)
                [output_dir,~,~] = fileparts(fitting.output_filename);
                if ~exist(output_dir,'dir')
                    mkdir(output_dir);
                end
                save(fitting.output_filename,'out');
                fprintf('Estimation output is saved at %s\n',fitting.output_filename);
            end

        end

        % Data fitting function
        function [out, r, f, fcsf, DeR] = fit(this,dwi,mask,fitting,pars0)
        %
        % Input
        % -----------
        % dwi       : S0 normalised 4D dwi images, [x,y,slice,diffusion], 4th dimension corresponding to [Sl0_b1,Sl0_b2,Sl2_b1,Sl2_b2, etc.]; the order of bval must match the order in the constructor gpuNEXI
        % mask      : 3D signal mask, [x,y,slice]
        % fitting   : fitting algorithm parameters
        %   .Nepoch             : no. of maximum iterations, default = 4000
        %   .initialLearnRate   : initial gradient step size, defaulr = 0.01
        %   .decayRate          : decay rate of gradient step size; learningRate = initialLearnRate / (1+decayRate*epoch), default = 0.0005
        %   .convergenceValue   : convergence tolerance, based on the slope of last 'convergenceWindow' data points on loss, default = 1e-8
        %   .convergenceWindow  : number of data points to check convergence, default = 20
        %   .tol                : stop criteria on metric value, default = 1e-3
        %   .lambda             : regularisation parameter, default = 0 (no regularisation)
        %   .TVmode             : mode for TV regulariation, '2D'|'3D', default = '2D'
        %   .regmap             : parameter map used for regularisation, 'fa'|'ra'|'Da'|'De', default = 'fa'
        %   .lmax               : Order of rotational invariant, 0|2, default = 0
        %   .lossFunction       : loss for data fidelity term, 'L1'|'L2'|'MSE', default = 'L1'
        %   .display            : online display the fitting process on figure, true|false, defualt = false
        % pars0     : 4D parameter starting points of fitting, [x,y,slice,param], 4th dimension corresponding to fitting  parameters with order [fa,Da,De,ra,p2] (optional)
        % 
        % Output
        % -----------
        % out       : output structure
        %   .final      : final results
        %       .fa         : Intraneurite volume fraction
        %       .Da         : Intraneurite diffusivity (um2/ms)
        %       .De         : Extraneurite diffusivity (um2/ms)
        %       .ra         : exchange rate from intra- to extra-neurite compartment
        %       .loss       : final loss metric
        %   .min        : results with the minimum loss metric across all iterations
        %       .fa         : Intraneurite volume fraction
        %       .Da         : Intraneurite diffusivity (um2/ms)
        %       .De         : Extraneurite diffusivity (um2/ms)
        %       .ra         : exchange rate from intra- to extra-neurite compartment
        %       .loss       : loss metric      
        % fa        : final Intraneurite volume fraction
        % Da        : final Intraneurite diffusivity (um2/ms)
        % De        : final Extraneurite diffusivity (um2/ms)
        % ra        : final exchange rate from intra- to extra-neurite compartment
        %
        % Description: askAdam Image-based NEXI model fitting
        %
        % Kwok-Shing Chan @ MGH
        % kchan2@mgh.harvard.edu
        % Date created: 8 Dec 2023
        % Date modified:
        %
        %
            
            % check GPU
            gpuDevice;
            
            % check image size
            dwi     = permute(dwi,[4 1 2 3]);
            dims    = size(dwi);

            if nargin < 3 || isempty(mask)
                % if no mask input then fit everthing
                mask = ones(dims);
            else
                % assume mask is 3D
                mask = permute(repmat(mask,[1 1 1 dims(1)]),[4 1 2 3]);
            end
            numMaskVox = numel(mask(mask ~= 0)) / dims(1);

            if nargin < 4
                fitting = struct();
            end

            % get all fitting algorithm parameters 
            fitting = this.check_set_default(fitting);

            % put data input gpuArray
            mask = gpuArray(logical(mask));  
            dwi  = gpuArray(single(dwi));
            
            % set fitting boundary
            ub  = [20,   1, 1, this.DeL];
            lb  = [0.1,eps,eps,    0.01];
            
            % set initial tarting points
            if nargin < 5
                % no initial starting points
                pars0 = [];
            else
                pars0 = permute(pars0,[4 1 2 3]);
                pars0 = single(pars0);
            end
            parameters = this.initialise_model(dims(2:end),pars0,ub,lb,fitting);   % all parameters are betwwen [0,1]
         
            w = zeros(size(dwi),'single');
            for kb = 1:numel(this.b)
                w(kb,:,:,:) = this.Nav(kb) ;
            end
            if strcmpi(fitting.lossFunction,'l1')
                w = sqrt(w);
            end
            w = w ./ max(w(:));
            w = w(mask>0);
            w = dlarray(gpuArray(w).','CB');

            % display optimisation algorithm parameters
            disp('----------------------------');
            disp('AskAdam algorithm parameters');
            disp('----------------------------');
            disp(['Maximum no. of iteration = ' num2str(fitting.Nepoch)]);
            disp(['Loss function            = ' fitting.lossFunction]);
            disp(['Loss tolerance           = ' num2str(fitting.tol)]);
            disp(['Convergence tolerance    = ' num2str(fitting.convergenceValue)]);
            disp(['Initial learning rate    = ' num2str(fitting.initialLearnRate)]);
            disp(['Learning rate decay rate = ' num2str( fitting.decayRate)]);
            if fitting.lambda > 0 
                disp(['Regularisation parameter = ' num2str(fitting.lambda)]);
                disp(['Regularisation Map       = ' fitting.regmap]);
                disp(['Total variation mode     = ' fitting.TVmode]);
            end
            
            % clear cache before running everthing
            accfun = dlaccelerate(@this.modelGradients);
            clearCache(accfun)

            % optimisation process
            averageGrad     = [];
            averageSqGrad   = [];
            
            if fitting.isdisplay
                figure
                C = colororder;
                lineLoss = animatedline('Color',C(2,:));
                ylim([0 inf])
                xlabel("Iteration")
                ylabel("Loss")
                grid on
                
            end
            start = tic;

            minLoss                 = inf; 
            minLossFidelity         = 0; 
            minLossRegularisation   = 0;
            convergenceCurr         = 1+fitting.convergenceValue;
            convergenceBuffer       = ones(fitting.convergenceWindow,1);
            A                       = [(1:fitting.convergenceWindow).', ones(fitting.convergenceWindow,1)]; % A matrix to derive convergence
            % optimisation
            for epoch = 1:fitting.Nepoch
                
                % make sure the parameters are [0,1]
                parameters = this.set_boundary(parameters);

                % Evaluate the model gradients and loss using dlfeval and the modelGradients function.
                [gradients,loss,loss_fidelity,loss_reg] = dlfeval(accfun,parameters,dwi,mask,w,ub,lb,numMaskVox,fitting);
            
                % Update learning rate.
                learningRate = fitting.initialLearnRate / (1+ fitting.decayRate*epoch);
                
                % get loss and compute convergence value
                loss                = double(gather(extractdata(loss)));
                convergenceBuffer   = [convergenceBuffer(2:end);loss];
                mc                  = A\convergenceBuffer;
                convergenceCurr     = -mc(1);

                % store also the results with minimal loss
                if minLoss > loss
                    minLoss                 = loss;
                    minLossFidelity         = loss_fidelity;
                    minLossRegularisation   = loss_reg;
                    parameters_minLoss      = parameters;
                end
                % check if the optimisation should be stopped
                if convergenceCurr < fitting.convergenceValue && epoch >= fitting.convergenceWindow
                    fprintf('Convergence is less than the tolerance %e \n',fitting.convergenceValue);
                    break
                end
                if loss < fitting.tol
                    fprintf('Loss is less than the tolerance %e \n',fitting.tol);
                    break
                end

                % Update the network parameters using the adamupdate function.
                [parameters,averageGrad,averageSqGrad] = adamupdate(parameters,gradients,averageGrad, ...
                    averageSqGrad,epoch,learningRate);
                
                
                if fitting.isdisplay
                    
                    addpoints(lineLoss,epoch, loss);
                
                    D = duration(0,0,toc(start),'Format','hh:mm:ss');
                    title("Epoch: " + epoch + ", Elapsed: " + string(D) + ", Loss: " + loss)
                    drawnow
                end
                if mod(epoch,100) == 0 || epoch == 1
                    % display some info
                    D = duration(0,0,toc(start),'Format','hh:mm:ss');
                    fprintf('Iteration #%4d,     Loss = %f,      Convergence = %e,     Elapsed:%s \n',epoch,loss,convergenceCurr,string(D));
                end
                
            end
            fprintf('Final loss         =  %e\n',double(loss));
            fprintf('Final convergence  =  %e\n',double(convergenceCurr));
            fprintf('Final #iterations  =  %d\n',epoch);
            
            % make sure the final results stay within boundary
            parameters = this.set_boundary(parameters);
            
            % rescale the network parameters
            parameters  = this.rescale_parameters(parameters,lb,ub);
            r       = single(gather(extractdata(parameters.r    .* mask(1,:,:,:)))); r      = reshape(r, [dims(2:end) 1]);
            f       = single(gather(extractdata(parameters.f    .* mask(1,:,:,:)))); f      = reshape(f, [dims(2:end) 1]);
            fcsf    = single(gather(extractdata(parameters.fcsf .* mask(1,:,:,:)))); fcsf   = reshape(fcsf, [dims(2:end) 1]);
            DeR     = single(gather(extractdata(parameters.DeR  .* mask(1,:,:,:)))); DeR    = reshape(DeR, [dims(2:end) 1]);
            
            % result at final iteration
            out.final.r     = r;
            out.final.f     = f;
            out.final.fcsf  = fcsf;
            out.final.DeR   = DeR;
            out.final.loss  = loss;
            out.final.loss_fidelity = double(gather(extractdata(loss_fidelity)));
            if fitting.lambda == 0
                out.final.loss_reg      = 0;
            else
                out.final.loss_reg      = double(gather(extractdata(loss_reg)));
            end
            
            % result at minimum loss
            parameters_minLoss      = this.rescale_parameters(parameters_minLoss,lb,ub);
            out.min.r       = single(gather(extractdata(parameters_minLoss.r    .* mask(1,:,:,:))));   out.min.r    = reshape(out.min.r, [dims(2:end) 1]);
            out.min.f       = single(gather(extractdata(parameters_minLoss.f    .* mask(1,:,:,:))));   out.min.f    = reshape(out.min.f, [dims(2:end) 1]);
            out.min.fcsf    = single(gather(extractdata(parameters_minLoss.fcsf .* mask(1,:,:,:))));   out.min.fcsf = reshape(out.min.fcsf, [dims(2:end) 1]);
            out.min.DeR     = single(gather(extractdata(parameters_minLoss.DeR  .* mask(1,:,:,:))));   out.min.DeR  = reshape(out.min.DeR, [dims(2:end) 1]);
            out.min.loss            = minLoss;
            out.min.loss_fidelity   = double(gather(extractdata(minLossFidelity)));
            if fitting.lambda == 0
                out.min.loss_reg      = 0;
            else
                out.min.loss_reg      = double(gather(extractdata(minLossRegularisation)));
            end
            
            disp('The processing is completed.')
            
            % clear GPU
            if gpuDeviceCount > 0
                gpuDevice([]);
            end

        end

        % compute the gradient and loss of forward modelling
        function [gradients,loss,loss_fidelity,loss_reg] = modelGradients(this, parameters, dlR, mask, weights, ub,lb, numMaskVox, fitting)

            % rescale network parameter to true values
            parameters = this.rescale_parameters(parameters,lb,ub);
            
            % Forward model
            % R           = this.FWD(parameters,fitting);
            R           = this.FWD(parameters,fitting.model,mask(1,:,:,:));
            R(isinf(R)) = 0;
            R(isnan(R)) = 0;

            % Masking
            % R   = dlarray(R(mask>0).',     'CB');
            R   = dlarray(R(:).',           'CB');
            dlR = dlarray(dlR(mask>0).',    'CB');

            % Data fidelity term
            switch lower(fitting.lossFunction)
                case 'l1'
                    loss_fidelity = l1loss(R, dlR, weights);
                case 'l2'
                    loss_fidelity = l2loss(R, dlR, weights);
                case 'mse'
                    loss_fidelity = mse(R, dlR);
            end
            
            % regularisation term
            if fitting.lambda > 0
                cost        = this.reg_TV(squeeze(parameters.(fitting.regmap)),squeeze(mask(1,:,:,:)),fitting.TVmode,fitting.voxelSize);
                loss_reg    = sum(abs(cost),"all")/numMaskVox *fitting.lambda;
            else
                loss_reg = 0;
            end
            
            % compute loss
            loss = loss_fidelity + loss_reg;
            
            % Calculate gradients with respect to the learnable parameters.
            gradients = dlgradient(loss,parameters);
        
        end
        
        % using maximum likelihood method to estimate starting points
        function pars0 = estimate_prior(this,dwi,mask, Nsample)
        % Estimation starting points for NEXI using likehood method

            bval = gather(this.b);

            start = tic;
            
            disp('Estimate starting points based on likelihood ...')

            % manage pool
            pool            = gcp('nocreate');
            isDeletepool    = false;
            if isempty(pool)
                Nworker = min(max(8,floor(maxNumCompThreads/4)),maxNumCompThreads);
                pool    = parpool('Processes',Nworker);
                isDeletepool = true;
            end

            if nargin < 4 || isempty(Nsample)
                Nsample         = 1e4;
            end
            % create training data
            [x_train, S_train] = this.traindata(Nsample);

            % reshape input data,  put DWI dimension to 1st dim
            dims    = size(dwi);
            dwi     = permute(dwi,[4 1 2 3]);
            dwi     = reshape(dwi,[dims(4), prod(dims(1:3))]);

            % find masked voxels
            ind         = find(mask(:));

            Nparam = 4;

            pars0_mask  = zeros(Nparam,length(ind),'single');
            parfor kvol = 1:length(ind)
                pars0_mask(:,kvol) = this.likelihood(dwi(:,ind(kvol)), x_train, S_train);
            end
            pars0           = zeros(Nparam,size(dwi,2),'single');
            pars0(:,ind)    = pars0_mask;

            % reshape estimation into image
            pars0           = permute(reshape(pars0,[size(pars0,1) dims(1:3)]),[2 3 4 1]);

            % Correction for CSF
            idx                 = bval < 4;
            Dint                = bval(idx)\-log(dwi(cat(1,idx,false(size(idx))),:));
            Dint                = permute(reshape(Dint,[size(Dint,1) dims(1:3)]),[2 3 4 1]);
            Dint(isnan(Dint))   = 0;
            Dint(isinf(Dint))   = 0;
            Dint(Dint<0)        = 0;
            mask_CSF            = medfilt3(Dint)>1;
            
            % ratio to modulate pars0 estimattion
            pars0_csf = [0.01,1,1,0.01];
            for k = 1:size(pars0,4)
                tmp                 = pars0(:,:,:,k);
                tmp(mask_CSF==1)    = tmp(mask_CSF==1).*pars0_csf(k);
                pars0(:,:,:,k)      = tmp;
            end

            ET  = duration(0,0,toc(start),'Format','hh:mm:ss');
            fprintf('Starting points estimated. Elapsed time (hh:mm:ss): %s \n',string(ET));
            if isDeletepool
                delete(pool);
            end

        end

        % NEXI signal
        % copmpute the forward model
        function [s] = FWD(this, pars, model, mask)
        % Forward model to generate NEXI signal
            if nargin < 4
                r       = pars.r;
                f       = pars.f;
                fcsf    = pars.fcsf;
                DeR     = pars.DeR;
            else
                % mask out voxels to reduce memory
                r       = pars.r(mask(1,:,:,:)).';
                f       = pars.f(mask(1,:,:,:)).';
                fcsf    = pars.fcsf(mask(1,:,:,:)).';
                DeR     = pars.DeR(mask(1,:,:,:)).';
            end
                
            % Forward model
            % 1. Intra-cellular signal
            switch model
                case 'Neuman'
                    C = this.neuman(r);
                case 'VanGelderen'
                    % C = this.vg(r);
                    C = this.vg2(r);    % less memory efficient but faster
            end
            Sa = sqrt(pi./(4*(this.b*this.Da - C))) .* exp(-C) .* erf(sqrt(this.b*this.Da - C));
            % 2. Extra-cellular signal
            dDe = (this.DeL - DeR); dDe = max(dDe,0); %dDe(dDe<0) = 0;
            Se = sqrt(pi./(4.*(dDe).*this.b)) .* exp(-this.b.*DeR) .* erf(sqrt(this.b .*(dDe)));
            % Combined signal
            s = (1-fcsf).*(f.*Sa + (1-f).*Se) + fcsf.*this.Scsf;
            % s = arrayfun(@AxCaliberSMT_signal_combine, C, f, fcsf, DeR, this.b,this.Da,this.DeL,this.Scsf);

            % make sure s cannot be greater than 1
            s = min(s,1);
                
        end
        
        function s = vg2(this,r)
            k           = 15;
            bm2_tmp     = gpuArray( this.bm2(1:k) );
            bm2_tmp     = permute(bm2_tmp(:),[2 3 1]);

            % s = arrayfun(@AxCaliberSMT_vanGelderen_decay_part1,r,bm2_tmp,this.delta,this.Delta,this.D0);
            % s = arrayfun(@AxCaliberSMT_vanGelderen_decay_part2,sum(s,3),r,this.D0,this.g);

            td          = r.^2/this.D0;
            bardelta    = this.delta./td ;
            barDelta    = this.Delta./td ;
            bm2bardelta = bm2_tmp.*bardelta;
            bm2barDelta = bm2_tmp.*barDelta;
            s = (2/(bm2_tmp.^3.*(bm2_tmp-1))).*(-2 ...
                        + 2*bm2bardelta ...
                        + 2*exp(-bm2bardelta) ...
                        + 2*exp(-bm2barDelta) ...
                        - exp(-bm2barDelta-bm2bardelta)...
                        - exp(-bm2barDelta+bm2bardelta));
            s = sum(s,3).*this.D0.*this.g.^2.*td.^3;
            
        end

        function s = neuman(this, r)
            s = (7/48)*this.g.^2.*this.delta*r.^4/this.D0;
        end

        % Total variation regularisation
        function cost = reg_TV(this,img,mask,TVmode,voxelSize)
            % voxel_size = [1 1 1];
            % Vr      = 1./sqrt(abs(mask.*this.gradient_operator(img,voxel_size)).^2+eps);
            cost = sum(abs(mask.*this.gradient_operator(img,voxelSize,TVmode)),4);

            % cost    = this.divergence_operator(mask.*(Vr.*(mask.*this.gradient_operator(img,voxel_size))),voxel_size);
        end
        
         % likelihood
        function [x_train, S_train, intervals] = traindata(this, N_samples, varargin)
            if nargin < 3
                intervals = [0.1 4 ;   % radius, um
                               0 1          ;   % intra-cellular volume fraction
                               0 1          ;   % isotropic volume fraction
                            0.2 gather(this.DeL)]  ;   % extra-cellular RD, um2/ms
                            % 0.01 1         ];   % sigma/b0 = 1/SNR_b0
            else
                intervals = varargin{1};
            end

            model = 'VanGelderen';
            
            numBSample = numel(gather(this.b));
            numParam   = size(intervals,1) ;
            
            % batch size can be modified according to available hardware
            batch_size  = 1e3;
            reps        = ceil(N_samples/batch_size);
            x_train     = zeros(numParam,batch_size,reps,'single');
            S_train     = zeros(numBSample,batch_size,reps,'single');
            for k = 1:reps
                % generate random parameter guesses and construct batch for NN signal evaluation
                pars = intervals(:,1) + diff(intervals,[],2).*rand(size(intervals,1),batch_size);

                params.r    = pars(1,:);
                params.f    = pars(2,:);
                params.fcsf = pars(3,:);
                params.DeR  = pars(4,:);

                Sl0 = this.FWD(params, model);

                % % NEXI Krger signal evaluation
                % Sl0 = zeros(numel(this.b),batch_size);
                % for j = 1:batch_size
                %     params.r    = pars(1,j);
                %     params.f    = pars(2,j);
                %     params.fcsf = pars(3,j);
                %     params.DeR  = pars(4,j);
                % 
                %     Sl0(:,j) = this.FWD(params, model);
                % end

                % remaining signals (dot, soma)
                x_train(:,:,k) = pars;
                S_train(:,:,k) = Sl0;

            end

        end
    
        function [pars_best, sse_best] = likelihood(this, S0, x_train, S_train)
            
            lmax = 0;
            wt = kron(ones(size(this.b)), 1./(2*(0:2:lmax)+1));
            wt = wt(:);
            nL = floor(lmax/2);
            S0 = S0(1:numel(this.b)*(nL+1),:);
            % batch size can be modified according to available hardware
            [Nx, ~, reps] = size(x_train);
            [~, Nv] = size(S0);
            pars_best = zeros(Nx,Nv);
            sse_best  = inf(1, Nv);
            for k = 1:reps
                pars = x_train(:,:,k);
                S    = S_train(:,:,k);
                for i = 1:Nv
                    S0i = S0(:,i);

                    % scale generated signals (fit S0) to input signal
                    sse = sum(wt.*(S0i - (S0i'*S)./dot(S,S).*S).^2);

                    % store best encountered parameter combination
                    [sse_new,best_index] = min(sse);
                    if sse_new<sse_best(i)
                        sse_best(i)    = sse_new;
                        pars_best(:,i) = pars(:,best_index);
                    end
                end
            end

        end
    
    end

    methods(Static)

        % initialise network parameters
        function parameters = initialise_model(img_size,pars0,ub,lb,fitting)
            
            % get relevant parameters
            randomness = fitting.randomness;

            % initialise model parameters randomly
            % 1st dimension preserves for DWI data points 
            r0      = rand([1 img_size],'single') ;     % values between [0,1]
            f0      = rand([1 img_size],'single') ;     % values between [0,1]
            fcsf0   = rand([1 img_size],'single') ;     % values between [0,1]
            DeR0    = rand([1 img_size],'single') ;     % values between [0,1]
            
            % if initial points are provided
            if ~isempty(pars0)
                % For noise propagation add a bit randomness to avoid trapped at initial points
                % randomness = 1/3; % 1: totally random; 0: use entirely the prior
                r0      =  (1-randomness)*((pars0(1,:,:,:) - lb(1)) /(ub(1)-lb(1))) + randomness*r0;     % values between [0,1]
                f0      =  (1-randomness)*((pars0(2,:,:,:) - lb(2)) /(ub(2)-lb(2))) + randomness*f0;     % values between [0,1]
                fcsf0   =  (1-randomness)*((pars0(3,:,:,:) - lb(3)) /(ub(3)-lb(3))) + randomness*fcsf0;     % values between [0,1]
                DeR0    =  (1-randomness)*((pars0(4,:,:,:) - lb(4)) /(ub(4)-lb(4))) + randomness*DeR0;     % values between [0,1]

            end
            parameters.r    = gpuArray( dlarray(r0));
            parameters.f    = gpuArray( dlarray(f0));
            parameters.fcsf = gpuArray( dlarray(fcsf0));
            parameters.DeR  = gpuArray( dlarray(DeR0));

        end
        
        % check and set default fitting algorithm parameters
        function fitting2 = check_set_default(fitting)
            fitting2 = fitting;

            % get fitting algorithm setting
            if ~isfield(fitting,'Nepoch')
                fitting2.numEpochs = 4000;
            end
            if ~isfield(fitting,'initialLearnRate')
                fitting2.initialLearnRate = 0.01;
            end
            if ~isfield(fitting,'decayRate')
                fitting2.decayRate = 0.0005;
            end
            if ~isfield(fitting,'tol')
                fitting2.tol = 1e-3;
            end
            if ~isfield(fitting,'lambda')
                fitting2.lambda = 0;
            end
            if ~isfield(fitting,'TVmode')
                fitting2.TVmode = '2D';
            end
            if ~-isfield(fitting,'regmap')
                fitting2.regmap = 'r';
            end
            if ~isfield(fitting,'voxelSize')
                fitting2.voxelSize = [2,2,2];
            end
            if ~isfield(fitting,'isdisplay')
                fitting2.isdisplay = 0;
            end
            if ~isfield(fitting,'randomness')
                fitting2.randomness = 0;
            end
            if ~isfield(fitting,'lmax')
                fitting2.lmax = 0;
            end
            if ~isfield(fitting,'convergenceValue')
                fitting2.convergenceValue = 1e-8;
            end
            if ~isfield(fitting,'convergenceWindow')
                fitting2.convergenceWindow = 20;
            end
            if ~isfield(fitting,'lossFunction')
                fitting2.lossFunction = 'L1';
            end
            if ~isfield(fitting,'output_filename')
                fitting2.output_filename = [];
            end
            if ~isfield(fitting,'isPrior')
                fitting2.isPrior = true;
            end
            if ~isfield(fitting,'model')
                fitting2.model = 'VanGelderen';
            end

        end
    
        % make sure all network parameters stay between 0 and 1
        function parameters = set_boundary(parameters)

            field = fieldnames(parameters);
            for k = 1:numel(field)
                parameters.(field{k})   = max(parameters.(field{k}),0); % Lower bound     
                parameters.(field{k})   = min(parameters.(field{k}),1); % upper bound

            end

        end
        
        % rescale the network parameters between the defined lower/upper bounds
        function parameters = rescale_parameters(parameters,lb,ub)
            parameters.r    = parameters.r      * (ub(1)-lb(1)) + lb(1);
            parameters.f    = parameters.f      * (ub(2)-lb(2)) + lb(2);
            parameters.fcsf = parameters.fcsf   * (ub(3)-lb(3)) + lb(3);
            parameters.DeR  = parameters.DeR    * (ub(4)-lb(4)) + lb(4);

        end

        function G = gradient_operator(img,voxel_size,TVmode)
            Dx = circshift(img,-1,1) - img;
            Dy = circshift(img,-1,2) - img;
            switch TVmode
                case '2D'
                    G = cat(4,Dx/voxel_size(1),Dy/voxel_size(2));
                case '3D'
                    Dz = circshift(img,-1,3) - img;
                    G = cat(4,Dx/voxel_size(1),Dy/voxel_size(2),Dz/voxel_size(3));
            end
            
        end

        function div = divergence_operator(G,voxel_size)

            G_x = G(:,:,:,1);
            G_y = G(:,:,:,2);
            G_z = G(:,:,:,3);
            
            [Mx, My, Mz] = size(G_x);
            
            Dx = [G_x(1:end-1,:,:); zeros(1,My,Mz)]...
                - [zeros(1,My,Mz); G_x(1:end-1,:,:)];
            
            Dy = [G_y(:,1:end-1,:), zeros(Mx,1,Mz)]...
                - [zeros(Mx,1,Mz), G_y(:,1:end-1,:)];
            
            Dz = cat(3, G_z(:,:,1:end-1), zeros(Mx,My,1))...
                - cat(3, zeros(Mx,My,1), G_z(:,:,1:end-1));
            
            div = -( Dx/voxel_size(1) + Dy/voxel_size(2) + Dz/voxel_size(3) );

        end
    
        function [NSegment,maxSlice] = findOptimalDivide(mask)

            dims = size(mask);

            % GPU info
            gpu         = gpuDevice;    
            maxMemory   = floor(gpu.TotalMemory / 1024^3)*1024^3 / (1024^2);        % Mb

            % memoryRequiredFixPerVoxel       = 40 * prod(dims);
            % memoryRequiredDynamicperVoxel   = 1.5e3 * prod(dims([1,2,4]));

            % get these number based on mdl fit
            memoryFixPerVoxel       = 0.0013;
            memoryDynamicPerVoxel   = 0.05;

            % find max. memory required
            memoryRequiredFix       = memoryFixPerVoxel * prod(dims(1:3)) ;         % Mb
            memoryRequiredDynamic   = memoryDynamicPerVoxel * numel(mask(mask>0));  % Mb

            if maxMemory > (memoryRequiredFix + memoryRequiredDynamic)
                % if everything fit in GPU
                maxSlice = dims(3);
                NSegment = 1;
            else
                % if not then divide the data
                 NvolSliceMax= 0;
                for k = 1:dims(3)
                    tmp             = mask(:,:,k);
                    NvolSliceMax    = max(NvolSliceMax,numel(tmp(tmp>0)));
                end
                maxMemoryPerSlice = memoryDynamicPerVoxel * NvolSliceMax;
                maxSlice = floor((maxMemory - memoryRequiredFix)/maxMemoryPerSlice);
                NSegment = ceil(dims(3)/maxSlice);
            end
        end
    
    end

end